{"ast":null,"code":"import Axios from 'axios';\nimport { CART_EMPTY } from '../constants/cartConstants';\nimport { ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS } from '../constants/orderConstants';\nexport const createOrder = order => async (dispatch, getState) => {\n  dispatch({\n    type: ORDER_CREATE_REQUEST,\n    payload: order\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.post('/api/orders', order, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data.order\n    });\n    dispatch({\n      type: CART_EMPTY\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  orderRouter.get('/:id', isAuth, expressAsyncHandler(async (req, res) => {\n    const order = await Order.findById(req.params.id);\n\n    if (order) {\n      res.send(order);\n    } else {\n      res.status(404).send({\n        message: 'Order Not Found'\n      });\n    }\n  }));\n};","map":{"version":3,"sources":["E:/Tugas Akhir/VendingMachine/frontend/src/actions/orderActions.js"],"names":["Axios","CART_EMPTY","ORDER_CREATE_FAIL","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","createOrder","order","dispatch","getState","type","payload","userSignin","userInfo","data","post","headers","Authorization","token","localStorage","removeItem","error","response","message","orderRouter","get","isAuth","expressAsyncHandler","req","res","Order","findById","params","id","send","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,QAIO,6BAJP;AAMA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClED,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEN,oBAAR;AAA8BO,IAAAA,OAAO,EAAEJ;AAAvC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AACJK,MAAAA,UAAU,EAAE;AAAEC,QAAAA;AAAF;AADR,QAEFJ,QAAQ,EAFZ;AAGA,UAAM;AAAEK,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAW,aAAX,EAA0BR,KAA1B,EAAiC;AACtDS,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASJ,QAAQ,CAACK,KAAM;AADjC;AAD6C,KAAjC,CAAvB;AAKAV,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEL,oBAAR;AAA8BM,MAAAA,OAAO,EAAEG,IAAI,CAACP;AAA5C,KAAD,CAAR;AACAC,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AACAiB,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACdb,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,iBADC;AAEPQ,MAAAA,OAAO,EACLU,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;;AAEDC,EAAAA,WAAW,CAACC,GAAZ,CACE,MADF,EAEEC,MAFF,EAGEC,mBAAmB,CAAC,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtC,UAAMtB,KAAK,GAAG,MAAMuB,KAAK,CAACC,QAAN,CAAeH,GAAG,CAACI,MAAJ,CAAWC,EAA1B,CAApB;;AACA,QAAI1B,KAAJ,EAAW;AACTsB,MAAAA,GAAG,CAACK,IAAJ,CAAS3B,KAAT;AACD,KAFD,MAEO;AACLsB,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEX,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;AACF,GAPkB,CAHrB;AAaD,CArCM","sourcesContent":["import Axios from 'axios';\r\nimport { CART_EMPTY } from '../constants/cartConstants';\r\nimport {\r\n  ORDER_CREATE_FAIL,\r\n  ORDER_CREATE_REQUEST,\r\n  ORDER_CREATE_SUCCESS,\r\n} from '../constants/orderConstants';\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  dispatch({ type: ORDER_CREATE_REQUEST, payload: order });\r\n  try {\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    const { data } = await Axios.post('/api/orders', order, {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    });\r\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: data.order });\r\n    dispatch({ type: CART_EMPTY });\r\n    localStorage.removeItem('cartItems');\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n\r\n  orderRouter.get(\r\n    '/:id',\r\n    isAuth,\r\n    expressAsyncHandler(async (req, res) => {\r\n      const order = await Order.findById(req.params.id);\r\n      if (order) {\r\n        res.send(order);\r\n      } else {\r\n        res.status(404).send({ message: 'Order Not Found' });\r\n      }\r\n    })\r\n  );\r\n\r\n};"]},"metadata":{},"sourceType":"module"}